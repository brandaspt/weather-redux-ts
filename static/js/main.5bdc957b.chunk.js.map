{"version":3,"sources":["backend/openWeather.ts","backend/requests.ts","redux/actionTypes/actionTypes.ts","redux/actions/actions.ts","redux/hooks.ts","components/ToggleFavourite/ToggleFavourite.tsx","components/FavouritesCanvas/FavouritesCanvas.tsx","components/FavouritesIndicator/FavouritesIndicator.tsx","components/NavBar/NavBar.tsx","components/Search/Search.tsx","components/WeatherInfo/WeatherInfo.tsx","App.tsx","redux/reducers/favouritesReducer.ts","redux/reducers/weatherDataReducer.ts","redux/reducers/canvasReducer.ts","redux/store.ts","index.tsx"],"names":["openWeather","axios","create","baseURL","getCurrentWeatherByCityName","cityName","a","get","process","data","getForecastWeatherByCityName","TOGGLE_FAVOURITE_CITY","SET_CURRENT_WEATHER","SET_5DAY_FORECAST_WEATHER","TOGGLE_CANVAS","toggleFavouriteCityAction","city","type","actionTypes","payload","toggleCanvasAction","setCurrentWeatherAction","set5DayForecastWeatherAction","getCurrentWeatherAction","dispatch","console","log","get5DayForecastAction","useAppSelector","useSelector","ToggleFavourite","props","favouriteCities","state","favourites","cities","toggleDispatch","useDispatch","className","find","favourite","cityId","onClick","FavouritesCanvas","isShowing","canvas","show","Offcanvas","onHide","placement","backdrop","Header","closeButton","Title","Body","ListGroup","map","Item","action","country","FavouritesIndicator","length","NavBar","Search","useState","setCity","placeholder","value","onChange","e","target","onKeyDown","key","WeatherInfo","currentWeatherData","weatherData","currentWeather","forecastData","forecast5Day","Container","name","sys","id","lat","coord","long","lon","format","utc","add","seconds","timezone","dt","weather","description","src","icon","alt","main","temp","toFixed","temp_min","temp_max","humidity","wind","speed","list","item","Card","Img","variant","as","Text","Footer","s","App","favouritesReducer","initialState","isFavourite","filter","weatherDataReducer","canvasReducer","mainReducer","combineReducers","persistConfig","storage","blacklist","persistedReducer","persistReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5bdc957b.chunk.js","sourcesContent":["import axios from \"axios\"\n\nconst openWeather = axios.create({\n  baseURL: \"https://api.openweathermap.org/data/2.5\",\n})\n\nexport default openWeather\n","import { IForecastData } from \"../types/forecastData\"\nimport { IOneCallData } from \"../types/oneCallData\"\nimport { IWeatherData } from \"../types/weatherData\"\nimport openWeather from \"./openWeather\"\n\nexport const getCurrentWeatherByCityName = async (cityName: string) => {\n  return (await openWeather.get<IWeatherData>(`/weather?q=${cityName}&appid=${process.env.REACT_APP_API_KEY}&units=metric`)).data\n}\n\nexport const getForecastWeatherByCityName = async (cityName: string) => {\n  return (await openWeather.get<IForecastData>(`/forecast?q=${cityName}&appid=${process.env.REACT_APP_API_KEY}&units=metric&cnt=17`)).data\n}\n\nexport const getOneCallData = async (lat: number, long: number) => {\n  return (await openWeather.get<IOneCallData>(`/onecall?lat=${lat}&lon=${long}&appid=${process.env.REACT_APP_API_KEY}&units=metric`)).data\n}\n","export const TOGGLE_FAVOURITE_CITY = \"TOGGLE_FAVOURITE_CITY\"\nexport const SET_CURRENT_WEATHER = \"SET_CURRENT_WEATHER\"\nexport const SET_5DAY_FORECAST_WEATHER = \"SET_5DAY_FORECAST_WEATHER\"\nexport const TOGGLE_CANVAS = \"TOGGLE_CANVAS\"\n","import { Dispatch } from \"redux\"\nimport { getCurrentWeatherByCityName, getForecastWeatherByCityName } from \"../../backend/requests\"\nimport { IFavouriteObj } from \"../../types/favouriteObj\"\nimport { IForecastData } from \"../../types/forecastData\"\nimport { IWeatherData } from \"../../types/weatherData\"\nimport * as actionTypes from \"../actionTypes/actionTypes\"\n\nexport const toggleFavouriteCityAction = (city: IFavouriteObj) => ({\n  type: actionTypes.TOGGLE_FAVOURITE_CITY,\n  payload: city,\n})\n\nexport const toggleCanvasAction = () => ({\n  type: actionTypes.TOGGLE_CANVAS,\n})\n\nexport const setCurrentWeatherAction = (data: IWeatherData) => ({\n  type: actionTypes.SET_CURRENT_WEATHER,\n  payload: data,\n})\n\nexport const set5DayForecastWeatherAction = (data: IForecastData) => ({\n  type: actionTypes.SET_5DAY_FORECAST_WEATHER,\n  payload: data,\n})\n\nexport const getCurrentWeatherAction = (cityName: string) => {\n  return async (dispatch: Dispatch) => {\n    try {\n      dispatch(setCurrentWeatherAction(await getCurrentWeatherByCityName(cityName)))\n    } catch (error) {\n      console.log(error)\n    }\n  }\n}\n\nexport const get5DayForecastAction = (cityName: string) => {\n  return async (dispatch: Dispatch) => {\n    try {\n      dispatch(set5DayForecastWeatherAction(await getForecastWeatherByCityName(cityName)))\n    } catch (error) {\n      console.log(error)\n    }\n  }\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { AiFillStar, AiOutlineStar } from \"react-icons/ai\"\nimport { useSelector } from \"react-redux\"\nimport { toggleFavouriteCityAction } from \"../../redux/actions/actions\"\nimport { useAppDispatch } from \"../../redux/hooks\"\nimport { IReduxStore } from \"../../redux/store\"\nimport { IFavouriteObj } from \"../../types/favouriteObj\"\n\nimport \"./ToggleFavourite.css\"\n\ninterface ToggleFavouriteProps {\n  city: IFavouriteObj\n}\n\nexport const ToggleFavourite = (props: ToggleFavouriteProps) => {\n  const favouriteCities = useSelector((state: IReduxStore) => state.favourites.cities)\n  const toggleDispatch = useAppDispatch()\n\n  return (\n    <div className=\"ToggleFavourite d-flex\">\n      {favouriteCities.find(favourite => favourite.cityId === props.city.cityId) ? (\n        <AiFillStar onClick={() => toggleDispatch(toggleFavouriteCityAction(props.city))} />\n      ) : (\n        <AiOutlineStar onClick={() => toggleDispatch(toggleFavouriteCityAction(props.city))} />\n      )}\n    </div>\n  )\n}\n","import { ListGroup, Offcanvas } from \"react-bootstrap\"\nimport { useDispatch } from \"react-redux\"\nimport { get5DayForecastAction, getCurrentWeatherAction, toggleCanvasAction } from \"../../redux/actions/actions\"\nimport { useAppSelector } from \"../../redux/hooks\"\nimport { ToggleFavourite } from \"../ToggleFavourite/ToggleFavourite\"\n\nconst FavouritesCanvas = () => {\n  const isShowing = useAppSelector(state => state.canvas.show)\n  const favouriteCities = useAppSelector(state => state.favourites.cities)\n  const dispatch = useDispatch()\n  return (\n    <>\n      <Offcanvas show={isShowing} onHide={() => dispatch(toggleCanvasAction())} placement=\"end\" backdrop={false}>\n        <Offcanvas.Header closeButton>\n          <Offcanvas.Title>Favourite Cities</Offcanvas.Title>\n        </Offcanvas.Header>\n        <Offcanvas.Body>\n          <ListGroup>\n            {favouriteCities.map(city => (\n              <ListGroup.Item\n                key={city.cityId}\n                action\n                className=\"d-flex\"\n                onClick={() => {\n                  dispatch(get5DayForecastAction(`${city.cityName}, ${city.country}`))\n                  dispatch(getCurrentWeatherAction(`${city.cityName}, ${city.country}`))\n                  dispatch(toggleCanvasAction())\n                }}\n              >\n                <div className=\"me-2\">\n                  {city.cityName}, {city.country}\n                </div>\n                <ToggleFavourite city={city} />\n              </ListGroup.Item>\n            ))}\n          </ListGroup>\n        </Offcanvas.Body>\n      </Offcanvas>\n    </>\n  )\n}\n\nexport default FavouritesCanvas\n","// Components\nimport { AiFillStar } from \"react-icons/ai\"\nimport { useSelector } from \"react-redux\"\nimport { IReduxStore } from \"../../redux/store\"\n\n// Styles\nimport \"./FavouritesIndicator.css\"\n\nconst FavouritesIndicator = () => {\n  const favouriteCities = useSelector((state: IReduxStore) => state.favourites.cities)\n  return (\n    <div className=\"FavouritesIndicator\">\n      <AiFillStar />\n      <div className=\"badge\">{favouriteCities.length}</div>\n    </div>\n  )\n}\nexport default FavouritesIndicator\n","// Components\nimport { TiWeatherPartlySunny } from \"react-icons/ti\"\nimport { useDispatch } from \"react-redux\"\nimport { toggleCanvasAction } from \"../../redux/actions/actions\"\nimport FavouritesIndicator from \"../FavouritesIndicator/FavouritesIndicator\"\n// Styles\nimport \"./NavBar.css\"\n\nconst NavBar = () => {\n  const dispatch = useDispatch()\n  return (\n    <nav className=\"NavBar d-flex align-items-center justify-content-between\">\n      <div className=\"logo d-flex align-items-end\">\n        <TiWeatherPartlySunny />\n        <h2 className=\"text-white\">Strive Weather</h2>\n      </div>\n      <div onClick={() => dispatch(toggleCanvasAction())}>\n        <FavouritesIndicator />\n      </div>\n    </nav>\n  )\n}\n\nexport default NavBar\n","import { ChangeEvent, KeyboardEvent, useState } from \"react\"\nimport { useDispatch } from \"react-redux\"\n\nimport { get5DayForecastAction, getCurrentWeatherAction } from \"../../redux/actions/actions\"\nimport \"./Search.css\"\n\nconst Search = () => {\n  const [city, setCity] = useState(\"\")\n  const dispatch = useDispatch()\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setCity(e.target.value)\n  }\n\n  const handleSubmit = (e: KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      dispatch(getCurrentWeatherAction(city))\n      dispatch(get5DayForecastAction(city))\n      setCity(\"\")\n    }\n  }\n\n  return (\n    <div className=\"Search d-flex flex-column align-items-center\">\n      <input\n        type=\"search\"\n        placeholder=\"Enter a city...\"\n        className=\"my-3\"\n        aria-label=\"Search\"\n        value={city}\n        onChange={handleChange}\n        onKeyDown={handleSubmit}\n      />\n    </div>\n  )\n}\n\nexport default Search\n","import Moment from \"react-moment\"\nimport { Card, Container } from \"react-bootstrap\"\nimport { ToggleFavourite } from \"../ToggleFavourite/ToggleFavourite\"\nimport { useSelector } from \"react-redux\"\nimport { IReduxStore } from \"../../redux/store\"\n\nimport \"./WeatherInfo.css\"\n\nconst WeatherInfo = () => {\n  const currentWeatherData = useSelector((state: IReduxStore) => state.weatherData.currentWeather)\n  const forecastData = useSelector((state: IReduxStore) => state.weatherData.forecast5Day)\n  return (\n    currentWeatherData && (\n      <Container className=\"WeatherInfo mb-4\">\n        <div className=\"d-flex\">\n          <h2 className=\"me-2\">\n            {currentWeatherData.name}, {currentWeatherData.sys.country}\n          </h2>\n          <ToggleFavourite\n            city={{\n              cityId: currentWeatherData.id,\n              country: currentWeatherData.sys.country,\n              cityName: currentWeatherData.name,\n              lat: currentWeatherData.coord.lat,\n              long: currentWeatherData.coord.lon,\n            }}\n          />\n        </div>\n        <Moment format=\"ddd, D MMM, HH:mm\" utc add={{ seconds: currentWeatherData.timezone }}>\n          {currentWeatherData.dt * 1000}\n        </Moment>\n        <p className=\"description\">{currentWeatherData.weather[0].description}</p>\n        <div className=\"d-flex align-items-center\">\n          <div className=\"d-flex align-items-center\">\n            <h2 className=\"m-0\">Now:</h2>\n            <img src={`http://openweathermap.org/img/wn/${currentWeatherData.weather[0].icon}@2x.png`} alt=\"\" />\n            <h1 className=\"m-0\">{currentWeatherData.main.temp.toFixed(0)} &#8451;</h1>\n          </div>\n          <div className=\"text-muted d-flex \">\n            <p className=\"mx-4\">Min: {currentWeatherData.main.temp_min.toFixed(0)} &#8451;</p>\n            <p>Max: {currentWeatherData.main.temp_max.toFixed(0)} &#8451;</p>\n            <p className=\"mx-4\">Humidity: {currentWeatherData.main.humidity} %</p>\n            <p>Wind: {currentWeatherData.wind.speed} km/h</p>\n          </div>\n        </div>\n        <h2 className=\"m-0 mb-3 text-center text-secondary\">2 Day / 3 Hour Forecast:</h2>\n        <div className=\"forecast d-flex flex-nowrap\">\n          {forecastData?.list.map(item => (\n            <Card key={item.dt}>\n              <Card.Img variant=\"top\" src={`http://openweathermap.org/img/wn/${item.weather[0].icon}@2x.png`} />\n              <Card.Body className=\"text-center p-1 d-flex flex-column\">\n                <Card.Title as=\"h2\">{item.main.temp.toFixed(0)} &#8451;</Card.Title>\n                <Card.Text as=\"small\" className=\"description\">\n                  {item.weather[0].description}\n                </Card.Text>\n                <Card.Text as=\"small\">Humidity: {item.main.humidity} %</Card.Text>\n                <Card.Text as=\"small\">Wind: {currentWeatherData.wind.speed} km/h</Card.Text>\n              </Card.Body>\n              <Card.Footer as=\"small\" className=\"text-center bg-dark text-white fw-bold p-1\">\n                <Moment format=\"D MMM, HH:mm\" utc add={{ s: forecastData.city.timezone }}>\n                  {item.dt * 1000}\n                </Moment>\n              </Card.Footer>\n            </Card>\n          ))}\n        </div>\n      </Container>\n    )\n  )\n}\n\nexport default WeatherInfo\n","import FavouritesCanvas from \"./components/FavouritesCanvas/FavouritesCanvas\"\nimport NavBar from \"./components/NavBar/NavBar\"\nimport Search from \"./components/Search/Search\"\nimport WeatherInfo from \"./components/WeatherInfo/WeatherInfo\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Search />\n      <WeatherInfo />\n      <FavouritesCanvas />\n    </div>\n  )\n}\n\nexport default App\n","import { TOGGLE_FAVOURITE_CITY } from \"../actionTypes/actionTypes\"\nimport { initialState } from \"../store\"\nimport { AnyAction } from \"@reduxjs/toolkit\"\n\nconst favouritesReducer = (state = initialState.favourites, action: AnyAction) => {\n  switch (action.type) {\n    case TOGGLE_FAVOURITE_CITY:\n      const isFavourite = state.cities.find(city => city.cityId === action.payload.cityId)\n      if (isFavourite) {\n        return { ...state, cities: [...state.cities.filter(city => city.cityId !== action.payload.cityId)] }\n      } else {\n        return { ...state, cities: [...state.cities, action.payload] }\n      }\n\n    default:\n      return state\n  }\n}\n\nexport default favouritesReducer\n","import { SET_5DAY_FORECAST_WEATHER, SET_CURRENT_WEATHER } from \"../actionTypes/actionTypes\"\nimport { initialState } from \"../store\"\nimport { AnyAction } from \"@reduxjs/toolkit\"\n\nconst weatherDataReducer = (state = initialState.weatherData, action: AnyAction) => {\n  switch (action.type) {\n    case SET_CURRENT_WEATHER:\n      return { ...state, currentWeather: action.payload }\n    case SET_5DAY_FORECAST_WEATHER:\n      return { ...state, forecast5Day: action.payload }\n    default:\n      return state\n  }\n}\n\nexport default weatherDataReducer\n","import { TOGGLE_CANVAS } from \"../actionTypes/actionTypes\"\nimport { initialState } from \"../store\"\nimport { AnyAction } from \"@reduxjs/toolkit\"\n\nconst canvasReducer = (state = initialState.canvas, action: AnyAction) => {\n  switch (action.type) {\n    case TOGGLE_CANVAS:\n      return { ...state, show: !state.show }\n\n    default:\n      return state\n  }\n}\n\nexport default canvasReducer\n","import { createStore, applyMiddleware, combineReducers } from \"redux\"\nimport thunk from \"redux-thunk\"\nimport { persistStore, persistReducer } from \"redux-persist\"\nimport storage from \"redux-persist/lib/storage\"\nimport { composeWithDevTools } from \"redux-devtools-extension\"\n\nimport { IFavouriteObj } from \"../types/favouriteObj\"\nimport { IWeatherData } from \"../types/weatherData\"\n\nimport favouritesReducer from \"./reducers/favouritesReducer\"\nimport weatherDataReducer from \"./reducers/weatherDataReducer\"\nimport canvasReducer from \"./reducers/canvasReducer\"\nimport { IForecastData } from \"../types/forecastData\"\n\nexport interface IReduxStore {\n  favourites: {\n    cities: IFavouriteObj[]\n  }\n  weatherData: {\n    currentWeather: IWeatherData | null\n    forecast5Day: IForecastData | null\n  }\n  canvas: {\n    show: boolean\n  }\n}\n\nexport const initialState: IReduxStore = {\n  favourites: {\n    cities: [],\n  },\n  weatherData: {\n    currentWeather: null,\n    forecast5Day: null,\n  },\n  canvas: {\n    show: false,\n  },\n}\n\nconst mainReducer = combineReducers({\n  favourites: favouritesReducer,\n  weatherData: weatherDataReducer,\n  canvas: canvasReducer,\n})\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  blacklist: [\"weatherData\", \"canvas\"],\n}\n\nconst persistedReducer = persistReducer(persistConfig, mainReducer)\n\nexport const store = createStore(persistedReducer, composeWithDevTools(applyMiddleware(thunk)))\nexport const persistor = persistStore(store)\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport { store } from \"./redux/store\"\nimport { Provider } from \"react-redux\"\nimport { BrowserRouter as Router } from \"react-router-dom\"\n\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport \"./index.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}